const DB_NAME='ArcWaveJobs';const DB_VERSION=1;
function openDB(){return new Promise((resolve,reject)=>{const r=indexedDB.open(DB_NAME,DB_VERSION);r.onupgradeneeded=e=>{const db=e.target.result;if(!db.objectStoreNames.contains('jobs'))db.createObjectStore('jobs',{keyPath:'name'});if(!db.objectStoreNames.contains('time'))db.createObjectStore('time',{keyPath:'id'});if(!db.objectStoreNames.contains('mileage'))db.createObjectStore('mileage',{keyPath:'id'});if(!db.objectStoreNames.contains('hotels'))db.createObjectStore('hotels',{keyPath:'id'});if(!db.objectStoreNames.contains('parts'))db.createObjectStore('parts',{keyPath:'id'});if(!db.objectStoreNames.contains('receipts'))db.createObjectStore('receipts',{keyPath:'id'});};r.onsuccess=()=>resolve(r.result);r.onerror=()=>reject(r.error);});}
async function put(s,v){const db=await openDB();return new Promise((res,rej)=>{const tx=db.transaction(s,'readwrite');tx.objectStore(s).put(v);tx.oncomplete=()=>res();tx.onerror=()=>rej(tx.error);});}
async function getAll(s){const db=await openDB();return new Promise((res,rej)=>{const tx=db.transaction(s,'readonly');const rq=tx.objectStore(s).getAll();rq.onsuccess=()=>res(rq.result);rq.onerror=()=>rej(rq.error);});}
async function get(s,k){const db=await openDB();return new Promise((res,rej)=>{const tx=db.transaction(s,'readonly');const rq=tx.objectStore(s).get(k);rq.onsuccess=()=>res(rq.result);rq.onerror=()=>rej(rq.error);});}