async function loadJobs(){const jobs=await getAll('jobs');const tbody=document.getElementById('jobsBody');tbody.innerHTML='';jobs.forEach(j=>{const tr=document.createElement('tr');tr.innerHTML=`<td>${j.name}</td><td>${j.technician||''}</td><td>${j.startDate||''}</td><td><span class="badge">${j.status||'in-progress'}</span></td><td class="row-actions"><button onclick="openJob('${j.name.replace(/'/g,"\'")}')">Open</button><button onclick="markComplete('${j.name.replace(/'/g,"\'")}')">Mark Complete</button><button onclick="deleteJob('${j.name.replace(/'/g,"\'")}')">Delete</button></td>`;tbody.appendChild(tr);});}
async function openJob(n){window.location.href='jobEntry.html?job='+encodeURIComponent(n);}
async function markComplete(n){const j=await get('jobs',n);if(!j)return;j.status='complete';await put('jobs',j);loadJobs();}
async function deleteJob(n){if(!confirm('Delete job and its entries?'))return;const db=await openDB();const tx=db.transaction(['jobs','time','mileage','hotels','parts','receipts'],'readwrite');tx.objectStore('jobs').delete(n);for(const s of ['time','mileage','hotels','parts','receipts']){const all=await new Promise((res,rej)=>{const r=tx.objectStore(s).getAll();r.onsuccess=()=>res(r.result);r.onerror=()=>rej(r.error);});all.filter(x=>x.job===n).forEach(x=>tx.objectStore(s).delete(x.id));}tx.oncomplete=()=>loadJobs();}
loadJobs();